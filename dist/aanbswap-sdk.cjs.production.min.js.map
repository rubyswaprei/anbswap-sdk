{"version":3,"file":"aanbswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  HECOMAIN = 128,\n  HECOTEST = 256,\n  BIANMAIN = 56,\n  BIANTEST = 97,\n  OKTEST = 65,\n  REITEST = 12357,\n  REIMAIN = 47805\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const INIT_CODE_HASHES = {\n  [ChainId.MAINNET]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.ROPSTEN]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.RINKEBY]: '0xcbd274eb022dedfc46038276780e5ace9d92e6ae7f78373cf6d5b4824137174d',\n  [ChainId.GÖRLI]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.KOVAN]: '0xe3a2d8b356e0265479117bb262881a7c7c690a1cf7392d0ab59e30d5134cbe06',\n  [ChainId.HECOMAIN]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.HECOTEST]: '0xb41380989311005c36adc9d06df110b2dca394d5984e5a806cb8bcfcbdb795dd',\n  [ChainId.BIANMAIN]: '0x4f28dfdda4977962d01e311877b42e2a192039a7276c57cc348ff240475368ee',\n  [ChainId.BIANTEST]: '0xea56e21b12517cd75b4dfe120cea52e54ab2951bbcbd6867fbbc35a344f13822',\n  [ChainId.OKTEST]: '0xa9252a257da1cf1409d57be07f4bffae98731dad512dd65b33f8ef8a999d92c5',\n  [ChainId.OKTEST]: '0xa9252a257da1cf1409d57be07f4bffae98731dad512dd65b33f8ef8a999d92c5',\n  [ChainId.REITEST]: '0xb4b8a1af19d818f6c5a66272c12fefda46605f033c9b861614c270f24ff738b1',\n  [ChainId.REIMAIN]: '0xb4b8a1af19d818f6c5a66272c12fefda46605f033c9b861614c270f24ff738b1'\n}\n\nexport const FACTORY_ADDRESS = {\n  [ChainId.MAINNET]: '',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '0xCAe58c3d3AaD92f0B6AE65B84Cdf697C13d5165C',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x54038C23b72b01eeDBaF4AE4C098D329FB2D32f1',\n  [ChainId.HECOMAIN]: '0x76854443c1FC36Bbad8E9Ae361ED415dD673640f',\n  [ChainId.HECOTEST]: '0xaBEff0D0E861F48A4449738031D72e724E1e7707',\n  [ChainId.BIANMAIN]: '0xf0bc2E21a76513aa7CC2730C7A1D6deE0790751f',\n  [ChainId.BIANTEST]: '0x75FbceBaeC2C35D0416524735A7Ed6d78e52b9ea',\n  [ChainId.OKTEST]: '0xbb362F4213eF1c0114158778c85861c8cdc0a66e',\n  [ChainId.REITEST]: '0xC30D5726A9d9c3B069d244F866Bfa4ba6f85A1E4',\n  [ChainId.REIMAIN]: '0x2e4cA0284f73924369e48ea947aD1A604395D2a2'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\n// export const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId,SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\nconst CurrencyName = {\n  [ChainId.MAINNET]: 'ETH',\n  [ChainId.ROPSTEN]: 'ETH',\n  [ChainId.RINKEBY]: 'ETH',\n  [ChainId.GÖRLI]: 'ETH',\n  [ChainId.KOVAN]: 'ETH',\n  [ChainId.BIANMAIN]: 'BNB',\n  [ChainId.BIANTEST]: 'BNB',\n  [ChainId.HECOMAIN]: 'HT',\n  [ChainId.HECOTEST]: 'HT',\n  [ChainId.OKTEST]: 'OKT',\n  [ChainId.REITEST]: 'REI',\n  [ChainId.REIMAIN]: 'REI'\n}\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, '(Currency)', 'Currency')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n  \n  toDisplayableSymbol(chainId: ChainId) {\n    if (this !== ETHER) return this.symbol\n    return CurrencyName[chainId]\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xecc360c7e9393E84D44F09b7f75c1dDd03f41969',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECOMAIN]: new Token(\n    ChainId.HECOMAIN,\n    '0x5545153ccfca01fbd7dd11c0b23ba694d9509a6f',\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HECOTEST]: new Token(\n    ChainId.HECOTEST,\n    '0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836',\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.BIANMAIN]: new Token(\n    ChainId.BIANMAIN,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.BIANTEST]: new Token(\n    ChainId.BIANTEST,\n    '0x094616F0BdFB0b526bD735Bf66Eca0Ad254ca81F',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.OKTEST]: new Token(ChainId.OKTEST, '0xB13991B6253172118b962045906b27ce73C21ecD', 18, 'WOKT', 'Wrapped OKT'),\n  [ChainId.REITEST]: new Token(\n    ChainId.REITEST,\n    '0x2545AF3D8b11e295bB7aEdD5826021AB54F71630',\n    18,\n    'WREI',\n    'Wrapped REI'\n  ),\n  [ChainId.REIMAIN]: new Token(ChainId.REIMAIN, '0x2545AF3D8b11e295bB7aEdD5826021AB54F71630', 18, 'WREI', 'Wrapped REI')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { FACTORY_ADDRESS,INIT_CODE_HASHES } from '../constants'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASHES[tokenA.chainId]\n          )\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'OLP:' + tokenAmounts[0].token.symbol + '-' + tokenAmounts[1].token.symbol,\n      'OortSwap LP Token'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, fee = 997): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.BigInt(fee))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, fee = 997): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), JSBI.BigInt(fee))\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n\n    let fee = 997\n    if (\n      (route.input.symbol === 'BUSD' && route.output.symbol === 'USDT') ||\n      (route.input.symbol === 'USDT' && route.output.symbol === 'BUSD')\n    )\n      fee = 1000\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], fee)\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], fee)\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport { Token } from './entities/token'\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = await Pair.getAddress(tokenA, tokenB)\n\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASHES","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","HECOMAIN","HECOTEST","BIANMAIN","BIANTEST","OKTEST","REITEST","REIMAIN","FACTORY_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CurrencyName","Currency","decimals","symbol","toDisplayableSymbol","chainId","this","ETHER","Token","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","fee","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","Fetcher","fetchPairData","provider","getDefaultProvider","getNetwork","Contract","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}